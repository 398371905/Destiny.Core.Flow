@using System;
@using Destiny.Core.Flow.CodeGenerator;


@{

    ProjectMetadata metadata = Model;
    string lowerFirstNmae = Destiny.Core.Flow.Extensions.Extensions.LowerFirstChar(metadata.EntityMetadata.EntityName);
    string serive = $"{lowerFirstNmae}Service";
    string _serive = $"_{serive}";
}

//------------------------------------------------------------------------------
//<auto-generated>
    //     此代码由代码生成器生成。
    //     手动更改此文件可能导致应用程序出现意外的行为。
    //     如果重新生成代码，将覆盖对此文件的手动更改。
    //
</auto-generated>
//<copyright file="I@(metadata.EntityMetadata.EntityName)Controllers.cs" company="@metadata.Company">
    //     @metadata.Copyright
    //
</copyright>
//<site>@metadata.SiteUrl</site>
//<last-editor>@metadata.Creator</last-editor>
//<last-date>@DateTime.Now.ToString("yyyy/MM/dd HH:mm")</last-date>
//------------------------------------------------------------------------------

using System;
using Destiny.Core.Flow.AspNetCore.Api;
using Destiny.Core.Flow.AspNetCore.Ui;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.ComponentModel;
using System.Threading.Tasks;
using @(metadata.Namespace).Dtos;
using @(metadata.Namespace).IServices.@(metadata.EntityMetadata.EntityName)s;
@using Destiny.Core.Flow.Extensions;
namespace @(metadata.Namespace).API.Controllers
{

       // &lt;summary&gt;
       ///@(string.IsNullOrEmpty(metadata.EntityMetadata.DisplayName) ? metadata.EntityMetadata.EntityName : metadata.EntityMetadata.DisplayName)
       /// &lt;/summary&gt;
       [Description("@metadata.EntityMetadata.DisplayName")]
    public class @(metadata.EntityMetadata.EntityName)Controller : ApiControllerBase
    {

    private readonly I@(metadata.EntityMetadata.EntityName)Service @_serive;

    public @(metadata.EntityMetadata.EntityName)Controller(@(metadata.EntityMetadata.EntityName)Service @serive)
    {
       @_serive=@serive
    }


    /// &lt;summary&gt;
    /// 异步创建@(metadata.EntityMetadata.DisplayName)
    /// &lt;/summary&gt;
    /// &lt;param name="dto"&gt;添加的@(metadata.EntityMetadata.DisplayName)DTO&lt;/param&gt;
    [HttpPost]
    [Description("异步创建@(metadata.EntityMetadata.DisplayName)")]
    public async Task&lt;AjaxResult&gt; CreateAsync([FromBody] @(metadata.EntityMetadata.EntityName)InputDto dto)
    {
    return (await @(_serive).CreateAsync(dto)).ToAjaxResult();
    }

    /// &lt;summary&gt;
    /// 异步更新@(metadata.EntityMetadata.DisplayName)
    /// &lt;/summary&gt;
    /// &lt;param name="dto"&gt;更新的@(metadata.EntityMetadata.DisplayName)DTO&lt;/param&gt;
    [HttpPost]
    [Description("异步更新@(metadata.EntityMetadata.DisplayName)")]
    public async Task&lt;AjaxResult&gt; UpdateAsync([FromBody] @(metadata.EntityMetadata.EntityName)InputDto dto)
    {
    return (await @(_serive).UpdateAsync(dto)).ToAjaxResult();
    }

    /// &lt;summary&gt;
    /// 异步加载表单@(metadata.EntityMetadata.DisplayName)
    /// &lt;/summary&gt;
    /// &lt;param name="id"&gt;要加载的@(metadata.EntityMetadata.DisplayName)主键&lt;/param&gt;
    [HttpGet]
    [Description("异步加载表单@(metadata.EntityMetadata.DisplayName)")]
    public async Task&lt;AjaxResult&lt; LoadFormAsync(@metadata.EntityMetadata.PrimaryKeyType id)
    {
      return (await @(_serive).LoadFormAsync(id)).ToAjaxResult();
    }


    /// &lt;summary&gt;
    /// 异步删除@(metadata.EntityMetadata.DisplayName)
    /// &lt;/summary&gt;
    /// &lt;param name="id"&gt;要删除的@(metadata.EntityMetadata.DisplayName)主键&lt;/param&gt;
    [HttpDelete]
    [Description("异步删除@(metadata.EntityMetadata.DisplayName)")]
    public async  Task&lt;AjaxResult&gt; DleteAsync(@metadata.EntityMetadata.PrimaryKeyType id)
    {
    return (await @(_serive).DeleteAsync(id)).ToAjaxResult();
    }

    /// &lt;summary&gt;
    /// 异步得到@(metadata.EntityMetadata.DisplayName)分页数据
    /// &lt;/summary&gt;
    /// &lt;param name="request"&gt;分页请求数据&lt;/param&gt;
    [HttpPost]
    [Description("异步得到@(metadata.EntityMetadata.DisplayName)分页数据")]
    public async  Task&lt;PageList&lt;@(metadata.EntityMetadata.EntityName)PageListDto&gt;&gt; GetPageAsync(PageRequest request);
    {
    return (await @(_serive).GetPageAsync(request)).ToPageList();
    }
    }
    }
